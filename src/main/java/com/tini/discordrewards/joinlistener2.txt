package me.tini.discordrewards;

import me.tini.discordrewards.config.RewardsElf;
import me.tini.discordrewards.linking.LinkedAccount;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.events.guild.member.GuildMemberJoinEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStream;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.keevers.logging.CustomLogger;

public class DiscordJoinListener extends ListenerAdapter {

    private static final Logger logger = LoggerFactory.getLogger(DiscordJoinListener.class);

    private final VelocityMariaDB database;
    private final RewardsElf RewardsElf;
    private final RewardsElf rewardsElf;
    private final Gson gson;
    private final Map<UUID, String> pending;
    private final Map<Long, LinkedAccount> accounts;
    private final File linkedFile;
    private final Map<UUID, String> uuidNameCache;

    public DiscordJoinListener(VelocityMariaDB database, RewardsElf RewardsElf, File linkedFile) {
        this.database = database;
        this.RewardsElf = RewardsElf;
        this.rewardsElf = new RewardsElf(database, RewardsElf);
        this.gson = new GsonBuilder().setPrettyPrinting().create();
        this.pending = new HashMap<>();
        this.accounts = new HashMap<>();
        this.uuidNameCache = new HashMap<>();
        this.linkedFile = linkedFile;

        loadAccountsFromFile();
        loadAccountsFromDatabase();
    }

    @Override
    public void onGuildMemberJoin(GuildMemberJoinEvent event) {
        Member member = event.getMember();
        long discordId = member.getUser().getIdLong();

        LinkedAccount account = getAccountByDiscordId(discordId);

        if (account != null) {
            logger.info("A previously verified user has joined, reconnecting rewards for Discord ID " + discordId);
            rewardsElf.handleReconnect(account);
        }
    }

    public void handleGetCootiesCommand(UUID uuid) {
        // Delegate to RewardsElf
        rewardsElf.handleGetCootiesCommand(uuid);
    }

    private void loadAccountsFromFile() {
        try {
            if (linkedFile.exists()) {
                LinkedAccount[] linked = gson.fromJson(new FileReader(linkedFile), LinkedAccount[].class);

                if (linked != null) {
                    for (LinkedAccount account : linked) {
                        accounts.put(account.getDiscordId(), account);
                    }
                }
            }
        } catch (IOException e) {
            logger.error("Error loading accounts from file", e);
        }
    }

    private void loadAccountsFromDatabase() {
        Map<Long, LinkedAccount> dbAccounts = database.loadAccounts();
        accounts.putAll(dbAccounts);
    }

    private LinkedAccount getAccountByDiscordId(long discordId) {
        return accounts.get(discordId);
    }

    public void updateAccount(LinkedAccount account) {
        accounts.put(account.getDiscordId(), account);
        database.saveLinkedAccount(account);
    }

    public boolean isPending(UUID uuid) {
        return pending.containsKey(uuid);
    }

    public String generateCode() {
        String code;
        do {
            code = CodeGenerator.generateCode(8);
        } while (pending.values().contains(code));
        return code;
    }

    public LinkedAccount getAccount(Long id) {
        return accounts.get(id);
    }

    public boolean isLinked(Long id) {
        return accounts.get(id) != null;
    }

    public LinkedAccount getAccount(UUID uuid) {
        return accounts.values().stream()
                .filter(account -> account.getUuid().equals(uuid.toString()))
                .findFirst()
                .orElse(null);
    }

    public boolean isLinked(UUID uuid) {
        return accounts.values().stream()
                .map(LinkedAccount::getUuid)
                .anyMatch(uuid.toString()::equals);
    }

    public void addPendingPlayer(UUID uuid, String name, String code) {
        pending.put(uuid, code);
        uuidNameCache.put(uuid, name);
    }

    public void save() {
        if (accounts.values().size() == 0) {
            return;
        }
        try (OutputStream os = new FileOutputStream(linkedFile)) {
            String json = gson.toJson(accounts.values());
            os.write(json.getBytes());
            os.flush();
        } catch (IOException e) {
            logger.error("Error saving accounts to file", e);
        }
    }

    public boolean isValidCode(String code) {
        return pending.values().contains(code);
    }

    public LinkedAccount link(Long discordId, String code) {
        for (Map.Entry<UUID, String> entry : pending.entrySet()) {
            UUID uuid = entry.getKey();
            String validCode = entry.getValue();

            if (validCode.equals(code)) {
                LinkedAccount acc = new LinkedAccount(discordId, getName(uuid), uuid.toString(), 0);
                accounts.put(discordId, acc);

                // cleanup
                pending.values().remove(code);
                uuidNameCache.remove(uuid);

                save();
                database.saveLinkedAccount(acc);

                return acc;
            }
        }
        return null;
    }

    private String getName(UUID uuid) {
        return uuidNameCache.get(uuid);
    }

    public Map<UUID, String> getPending() {
        return pending;
    }

    public Map<Long, LinkedAccount> getAccounts() {
        return accounts;
    }

    public Map<UUID, String> getUuidNameCache() {
        return uuidNameCache;
    }
}